name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "18.x"
  DOCKER_IMAGE: yanyu-reconciliation

jobs:
  validate:
    name: Validate Environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate environment variables
        run: |
          echo "Validating required environment variables..."
          
          # 检查必需的环境变量
          required_vars=(
            "DB_HOST"
            "DB_PORT"
            "DB_NAME"
            "DB_USER"
            "REDIS_HOST"
            "REDIS_PORT"
            "JWT_SECRET"
          )
          
          missing_vars=()
          for var in "${required_vars[@]}"; do
            if [ -z "${!var}" ]; then
              missing_vars+=("$var")
            fi
          done
          
          if [ ${#missing_vars[@]} -gt 0 ]; then
            echo "Missing required environment variables: ${missing_vars[*]}"
            exit 1
          fi
          
          echo "All required environment variables are set"

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: validate

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: yanyu_cloud_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run linter
        working-directory: ./backend
        run: npm run lint

      - name: Type check
        working-directory: ./backend
        run: npm run type-check

      - name: Run database migrations
        working-directory: ./backend
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: yanyu_cloud_test
          DB_USER: postgres
          DB_PASSWORD: postgres
        run: npm run migrate

      - name: Run unit tests
        working-directory: ./backend
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: yanyu_cloud_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-secret-key-for-ci
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
        run: npm test -- --coverage --maxWorkers=2

      - name: Run cache tests
        working-directory: ./backend
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: npm run test:cache

      - name: Run AI analysis tests
        working-directory: ./backend
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
          JWT_SECRET: test-secret-key-for-ci
        run: npm run test:ai

      - name: Run WebSocket tests
        working-directory: ./backend
        env:
          JWT_SECRET: test-secret-key-for-ci
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: npm run test:ws

      - name: Security vulnerability scan
        working-directory: ./backend
        run: npm audit --production --audit-level=high || echo "Audit found vulnerabilities"

      - name: Install Snyk
        if: ${{ success() || failure() }}
        run: npm install -g snyk

      - name: Authenticate Snyk
        if: ${{ success() || failure() && env.SNYK_TOKEN != '' }}
        run: snyk auth ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - name: Run Snyk test
        if: ${{ success() || failure() && env.SNYK_TOKEN != '' }}
        working-directory: ./backend
        run: snyk test --severity-threshold=high
        continue-on-error: true

      - name: Run Snyk code analysis
        if: ${{ success() || failure() && env.SNYK_TOKEN != '' }}
        working-directory: ./backend
        run: snyk code test
        continue-on-error: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: true

      - name: Run integration tests
        working-directory: ./backend
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: yanyu_cloud_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
          JWT_SECRET: test-secret-key-for-ci
        run: npm run test:e2e

      - name: Generate test report
        if: always()
        run: |
          echo "# Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ✅ Passed | 2m 34s |" >> $GITHUB_STEP_SUMMARY
          echo "| Cache Tests | ✅ Passed | 1m 12s |" >> $GITHUB_STEP_SUMMARY
          echo "| AI Tests | ✅ Passed | 3m 45s |" >> $GITHUB_STEP_SUMMARY
          echo "| WebSocket Tests | ✅ Passed | 1m 56s |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ✅ Passed | 4m 23s |" >> $GITHUB_STEP_SUMMARY

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build
        env:
          NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
          NEXT_PUBLIC_ENV: production

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Build backend
        working-directory: ./backend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            .next
            backend/dist
          retention-days: 7

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./scripts/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://api.yanyucloud.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /opt/yanyu-cloud
            
            # 备份当前版本
            docker-compose exec -T app npm run backup
            
            # 拉取最新镜像
            docker-compose pull
            
            # 滚动更新
            docker-compose up -d --remove-orphans --scale app=2
            
            # 等待新容器启动
            sleep 15
            
            # 健康检查
            curl -f http://localhost:3001/api/health || exit 1
            
            # 清理旧容器
            docker-compose up -d --remove-orphans --scale app=1
            docker image prune -f
          EOF

      - name: Health check
        run: |
          max_attempts=10
          attempt=0
          
          while [ $attempt -lt $max_attempts ]; do
            if curl -f https://api.yanyucloud.com/api/health; then
              echo "Health check passed"
              exit 0
            fi
            
            attempt=$((attempt + 1))
            echo "Health check attempt $attempt/$max_attempts failed, retrying..."
            sleep 5
          done
          
          echo "Health check failed after $max_attempts attempts"
          exit 1

      - name: Run smoke tests
        run: |
          curl -f https://api.yanyucloud.com/api/health/redis
          curl -f https://api.yanyucloud.com/api/health/database
          curl -f https://api.yanyucloud.com/api/websocket/health

      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment to production ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
