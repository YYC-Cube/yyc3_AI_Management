version: '3.8'

services:
  app:
    build:
      context: ..
      dockerfile: scripts/Dockerfile
      target: builder
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:${DEV_DB_PASSWORD}@postgres:5432/yanyu_cloud_dev
      - REDIS_URL=redis://:${DEV_REDIS_PASSWORD}@redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NEXT_PUBLIC_APP_URL=http://localhost:3000
      - DEV_DB_PASSWORD=${DEV_DB_PASSWORD}
      - DEV_REDIS_PASSWORD=${DEV_REDIS_PASSWORD}
    volumes:
      - ../:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - postgres
      - redis
    command: npm run dev
    networks:
      - yanyu-network

  backend:
    build:
      context: ../backend
      dockerfile: ../scripts/Dockerfile
      target: builder
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=yanyu_cloud_dev
      - DB_USER=postgres
      - DB_PASSWORD=${DEV_DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${DEV_REDIS_PASSWORD}
      - LOG_LEVEL=debug
      - DEV_DB_PASSWORD=${DEV_DB_PASSWORD}
      - DEV_REDIS_PASSWORD=${DEV_REDIS_PASSWORD}
    volumes:
      - ../backend:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    command: npm run dev
    networks:
      - yanyu-network

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=yanyu_cloud_dev
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DEV_DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - yanyu-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${DEV_REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - yanyu-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${DEV_REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${DEV_REDIS_PASSWORD}
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - yanyu-network

  adminer:
    image: adminer:4
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres
    networks:
      - yanyu-network

  mailhog:
    image: mailhog/mailhog:v1.0.1
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - yanyu-network

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - yanyu-network

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - yanyu-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - yanyu-network

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data:

networks:
  yanyu-network:
    driver: bridge
